####1. What happens when you initialize a repository? Why do you need to do it?

creates a folder .git  
to allow git to track changes

####2. How is the staging area different from the working directory and the repository? What value do you think it offers?  
It allows me to choose which files are being worked on, so that these can be committed en bloc.  
Why can't the entire working directory be the staging area? Is it because of size?


####3. How can you use the staging area to make sure you have one commit per logical change?
You can make a bunch of changes in the working directory.  
Then move one modified file into the staging area.  
Then commit this one logical change.  
Then move the next modified file, and so on – one logical change by logical change – into the staging area.  
This way, all the commits contain only one logical change, although a bunch of these changes can be made en masse in the working directory.  
May be better to only work on a logical problem at a time, so that it's easy to co-ordinate commits.

####4. What are some situations when branches would be helpful in keeping your history organized? How would branches help?  
Experimenting with new directions, whilst keeping a working version instantly available.  
A large overhaul.  
Master branch = always works = production-quality  
Development branch = trying out new things  
Experimental branches / unique feature branches  
Good also for collaboration with other people, working on separate aspects  

####5. How do the diagrams help you visualize the branch structure?
Branches can be complicated!  
And it also helps to understand how unreachable commits can be created.  
And a diagram is easier to grasp than a linear (even using the `git log --graph --oneline command) print-out in CLI.  

####6. What is the result of merging two branches together? Why do we represent it in the diagram the way we do?
The changes are combined.  
It's tricky though!  
Make sure I am in the branch that I want to have as the continuing branch - the master branch.  (Or, could I rename it later?). Ran into problems running a merge from a side_branch, instead of master.  Tried reset revert and pull, and I think *somehow* it got fixed...

####7. What are the pros and cons of Git’s automatic merging vs. always doing merges manually?
Note that B is a *stand-in* for a line – not the actual code itself  
B' (B prime) is a modified version of that line; B'' (B double prime) is another modified version of that line)  
And Git doesn't know if B' is a completely new line, or just modified.  Git just notes that the lines are **different**  
Git will say "Automatic merge failed; fix conflicts and then commit the result".  

`<<<<<<<HEAD` = 7 "heads" – this indicates where I am at the moment.  
`|||||||merged common ancestors` – this indicates where the conflict is – changes made in the **other** branch that aren't present in the **current** (head) branch  
`=======` – what the code was replaced with (?)  – this code could be moved elsewhere in the file, but it may not show because it didn't cause a conflict.  

Make changes, then `git status` > `both modified: <file_name>`  
Then `git add <file_name>`  
Then `git status` > All conflicts are fixed but you are still merging – use `git commit` to continue merging  
Then `git commit`  

Automatic and manual merging is complicated!!